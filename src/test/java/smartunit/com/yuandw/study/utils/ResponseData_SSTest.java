/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.yuandw.study.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.yuandw.study.utils.ResponseData;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ResponseData_SSTest extends ResponseData_SSTest_scaffolding {
// allCoveredLines:[27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 40, 44, 48, 49, 52, 56, 57, 60, 64, 65, 69]

  @Test(timeout = 4000)
  public void test_getCode_0()  throws Throwable  {
      //caseID:793ef6982e5d13819af11c474ced137e
      //CoveredLines: [27, 28, 29, 30, 44]
      //Assert: assertEquals("39", responseData0.getMsg());
      //Assert: assertEquals(", msg='", method_result);
      
      ResponseData<String> responseData0 = new ResponseData<String>(", msg='", "39");
      
      //Call method: getCode
      String string0 = responseData0.getCode();
      
      //Test Result Assert
      assertEquals("39", responseData0.getMsg());
      
      //Test Result Assert
      assertEquals(", msg='", string0);
  }

  @Test(timeout = 4000)
  public void test_getData_1()  throws Throwable  {
      //caseID:5d521e3925f02ffacba5af4247dddf8e
      //CoveredLines: [32, 33, 34, 35, 36, 60]
      //Assert: assertEquals(", data=", method_result);
      
      ResponseData<Object> responseData0 = new ResponseData<Object>(", data=", ", data=", ", data=");
      
      //Call method: getData
      Object object0 = responseData0.getData();
      
      //Test Result Assert
      assertEquals(", data=", object0);
  }

  @Test(timeout = 4000)
  public void test_getMsg_2()  throws Throwable  {
      //caseID:0b2534de3cb14a180084164ed1f1d367
      //CoveredLines: [27, 28, 29, 30, 52]
      //Assert: assertEquals("ResponseData{code='", method_result);
      
      ResponseData<Integer> responseData0 = new ResponseData<Integer>("ResponseData{code='", "ResponseData{code='");
      
      //Call method: getMsg
      String string0 = responseData0.getMsg();
      
      //Test Result Assert
      assertEquals("ResponseData{code='", string0);
  }

  @Test(timeout = 4000)
  public void test_setCode_3()  throws Throwable  {
      //caseID:a3f2b468d3639f8f4d74702cba4b7918
      //CoveredLines: [27, 28, 29, 30, 48, 49]
      //Input_0_String: 39
      
      ResponseData<Object> responseData0 = new ResponseData<Object>("", "1");
      
      //Test Result Assert
      assertEquals("", responseData0.getCode());
      
      
      //Call method: setCode
      responseData0.setCode("39");
      
      //Test Result Assert
      assertEquals("1", responseData0.getMsg());
  }

  @Test(timeout = 4000)
  public void test_setData_4()  throws Throwable  {
      //caseID:abf3429cc9d7d361b7c520ac64758b3e
      //CoveredLines: [38, 40, 64, 65]
      //Input_0_Object: 1.0
      
      ResponseData<Object> responseData0 = new ResponseData<Object>();
      
      //Call method: setData
      responseData0.setData("1.0");
      
      //Test Result Assert
      assertNull(responseData0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_5()  throws Throwable  {
      //caseID:ff80ae228faa80e58bada198c2e027bd
      //CoveredLines: [38, 40, 56, 57]
      //Input_0_String: 1.0
      
      ResponseData<String> responseData0 = new ResponseData<String>();
      
      //Call method: setMsg
      responseData0.setMsg("1.0");
      
      //Test Result Assert
      assertNull(responseData0.getCode());
  }

  @Test(timeout = 4000)
  public void test_setMsg_6()  throws Throwable  {
      //caseID:0c08a6b38520cd88bdfbe47433a2f8da
      //CoveredLines: [32, 33, 34, 35, 36, 56, 57]
      //Input_0_String: B
      
      ResponseData<Object> responseData0 = new ResponseData<Object>(", data=", "1", "1");
      
      //Test Result Assert
      assertEquals("1", responseData0.getMsg());
      
      
      //Call method: setMsg
      responseData0.setMsg("B");
      
      //Test Result Assert
      assertEquals(", data=", responseData0.getCode());
  }

  @Test(timeout = 4000)
  public void test_toString_7()  throws Throwable  {
      //caseID:6330994489215728fc4ee9ec9d4c033b
      //CoveredLines: [32, 33, 34, 35, 36, 69]
      //Assert: assertEquals("ResponseData{code='1.0', msg='1', data=1}", method_result);
      
      Integer integer0 = new Integer(1);
      ResponseData<Integer> responseData0 = new ResponseData<Integer>("1.0", "1", integer0);
      
      //Call method: toString
      String string0 = responseData0.toString();
      
      //Test Result Assert
      assertEquals("ResponseData{code='1.0', msg='1', data=1}", string0);
  }
}
