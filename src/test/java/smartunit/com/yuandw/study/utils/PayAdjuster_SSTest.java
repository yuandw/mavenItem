/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.yuandw.study.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import com.yuandw.study.utils.PayAdjuster;
import java.time.LocalDate;
import java.time.temporal.Temporal;
import org.junit.runner.RunWith;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.mock.java.time.MockLocalDate;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class PayAdjuster_SSTest extends PayAdjuster_SSTest_scaffolding {
// allCoveredLines:[15, 18, 19, 20, 21, 23]

  @Test(timeout = 4000)
  public void test_adjustInto_0()  throws Throwable  {
      //caseID:f8d1c2dadbde7db5e95065f6517bdbf2
      //CoveredLines: [15, 18, 19, 20, 23]
      //Input_0_Temporal: localDate0
      //Assert: assertNotSame(localDate0, method_result);
      
      PayAdjuster payAdjuster0 = new PayAdjuster();
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(4725L);
      
      //Call method: adjustInto
      Temporal temporal0 = payAdjuster0.adjustInto(localDate0);
      
      //Test Result Assert
      assertNotSame(localDate0, temporal0);
  }

  @Test(timeout = 4000)
  public void test_adjustInto_1()  throws Throwable  {
      //caseID:3e99434a47e3bf09b58c1152c11eec8f
      //CoveredLines: [15, 18, 19, 20, 21, 23]
      //Input_0_Temporal: localDate0
      //Assert: assertNotSame(method_result, localDate0);
      
      PayAdjuster payAdjuster0 = new PayAdjuster();
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(39L);
      
      //Call method: adjustInto
      Temporal temporal0 = payAdjuster0.adjustInto(localDate0);
      
      //Test Result Assert
      assertNotSame(temporal0, localDate0);
  }

  @Test(timeout = 4000)
  public void test_adjustInto_2()  throws Throwable  {
      //caseID:d978dea899a93fe32103ac617661e405
      //CoveredLines: [15, 18, 19, 20, 21, 23]
      //Input_0_Temporal: localDate0
      //Assert: assertTrue(method_result.equals((Object)localDate0));
      //Assert: assertNotSame(method_result, localDate0);
      
      PayAdjuster payAdjuster0 = new PayAdjuster();
      
      LocalDate localDate0 = MockLocalDate.now();
      
      //Call method: adjustInto
      Temporal temporal0 = payAdjuster0.adjustInto(localDate0);
      
      //Test Result Assert
      assertTrue(temporal0.equals((Object)localDate0));
      
      //Test Result Assert
      assertNotSame(temporal0, localDate0);
  }
}
