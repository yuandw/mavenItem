/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.yuandw.study;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.yuandw.study.Bootstrap;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Bootstrap_SSTest extends Bootstrap_SSTest_scaffolding {
// allCoveredLines:[24, 28, 29, 30, 37, 39, 41, 43, 44, 45, 48, 49, 50, 54]

  @Test(timeout = 4000)
  public void test_customize_0()  throws Throwable  {
      //caseID:e9c09131392a798a4da84c2aabc48ec5
      //CoveredLines: [24, 37, 54]
      //Input_0_ConfigurableEmbeddedServletContainer: {}
      
      Bootstrap bootstrap0 = new Bootstrap();
      //mock tomcatEmbeddedServletContainerFactory0
      TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory0 = mock(TomcatEmbeddedServletContainerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: customize
      bootstrap0.customize(tomcatEmbeddedServletContainerFactory0);
  }

  @Test(timeout = 4000)
  public void test_customize_1()  throws Throwable  {
      //caseID:c724cb49702ea759a4c9a119ad38ad0c
      //CoveredLines: [24, 37, 39, 54]
      //Input_0_ConfigurableEmbeddedServletContainer: {}
      
      Bootstrap bootstrap0 = new Bootstrap();
      
      PrivateAccess.setVariable((Class<?>) Bootstrap.class, bootstrap0, "ports", (Object) "  Validity exception");
      //mock configurableEmbeddedServletContainer0
      ConfigurableEmbeddedServletContainer configurableEmbeddedServletContainer0 = mock(ConfigurableEmbeddedServletContainer.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: customize
      bootstrap0.customize(configurableEmbeddedServletContainer0);
  }

  @Test(timeout = 4000)
  public void test_customize_2()  throws Throwable  {
      //caseID:80058a4e8d57b33009eddd41a6669e98
      //CoveredLines: [24, 37, 39, 41, 43, 44, 45, 48, 49, 50, 54]
      //Input_0_ConfigurableEmbeddedServletContainer: {}
      
      Bootstrap bootstrap0 = new Bootstrap();
      
      PrivateAccess.setVariable((Class<?>) Bootstrap.class, bootstrap0, "ports", (Object) "1");
      //mock tomcatEmbeddedServletContainerFactory0
      TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory0 = mock(TomcatEmbeddedServletContainerFactory.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: customize
      bootstrap0.customize(tomcatEmbeddedServletContainerFactory0);
  }

  @Test(timeout = 4000)
  public void test_main_3()  throws Throwable  {
      //caseID:17a5ad28e854a08ed76e90a4e30aa681
      //CoveredLines: [24, 28, 29, 30]
      //Input_0_String[]: stringArray0
      
      Bootstrap bootstrap0 = new Bootstrap();
      String[] stringArray0 = new String[0];
      
      //Call method: main
      // Undeclared exception!
      try { 
        Bootstrap.main(stringArray0);
      } catch(Throwable e) {
         verifyException("org.springframework.boot.autoconfigure.AutoConfigurationImportSelector", e);
         assertEquals("java.lang.NoClassDefFoundError", e.getClass().getName());
         assertEquals("org/springframework/boot/context/properties/bind/Binder", e.getMessage());
      }
  }
}
